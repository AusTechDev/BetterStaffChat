/*
 * BetterStaffChat - build.gradle
 * Copyright (C) 2021 AusTech Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */


import org.apache.tools.ant.filters.ReplaceTokens
import org.eclipse.jgit.lib.Ref
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.revwalk.RevWalk

plugins {
    id 'java'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'net.kyori.indra' version "2.0.4" apply false
    id 'net.kyori.indra.git' version "2.0.4"
}

group = 'dev.austech'
version = '1.1.0'

// https://github.com/EssentialsX/Essentials/blob/2.x/build.gradle
@SuppressWarnings('GrMethodMayBeStatic')
def commitsSinceLastTag() {
    if (indraGit == null || !indraGit.isPresent() || indraGit.tags().isEmpty()) {
        return -1
    }
    def tags = indraGit.tags()
    def depth = 0
    def walk = new RevWalk(indraGit.git().getRepository())
    def commit = walk.parseCommit(indraGit.commit())
    while (true) {
        for (tag in tags) {
            if (walk.parseCommit(tag.getLeaf().getObjectId()) == commit) {
                walk.dispose()
                indraGit.git().close()
                return depth
            }
        }
        depth++
        commit = walk.parseCommit(commit.getParents()[0])
    }
}

@SuppressWarnings('GrMethodMayBeStatic')
def headBranchName() {
    if (System.getenv("GITHUB_HEAD_REF") != null && !System.getenv("GITHUB_HEAD_REF").isEmpty()) {
        return System.getenv("GITHUB_HEAD_REF")
    } else if (System.getenv("GITHUB_REF") != null && !System.getenv("GITHUB_REF").isEmpty()) {
        return System.getenv("GITHUB_REF").replaceFirst("refs/heads/", "")
    }

    if (!indraGit.isPresent()) {
        return "detached-head"
    }

    Ref ref = indraGit.git().getRepository().exactRef('HEAD')?.target
    if (ref == null) {
        return "detached-head"
    }

    return Repository.shortenRefName(ref.name)
}

ext {
    GIT_COMMIT = !indraGit.isPresent() ? "unknown" : indraGit.commit().abbreviate(7).name()
    GIT_DEPTH = commitsSinceLastTag()
    GIT_BRANCH = headBranchName()

    fullVersion = "${version}".replace("-SNAPSHOT", "-dev+${GIT_DEPTH}-${GIT_COMMIT}")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "io.freefair.lombok"

    group = project.group
    version = project.version

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven { url 'https://m2.dv8tion.net/releases' }
    }

    dependencies {
        compileOnly 'net.dv8tion:JDA:4.2.1_262'
        compileOnly 'org.projectlombok:lombok:1.18.20'
    }

    processResources {
        inputs.property('fullVersion', fullVersion)
        filter ReplaceTokens, tokens: [
                "version": fullVersion
        ]
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        archiveVersion.set(fullVersion)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(path: ':BetterStaffChat-common', configuration: 'shadow')
    implementation project(path: ':BetterStaffChat-spigot', configuration: 'shadow')
    implementation project(path: ':BetterStaffChat-bungeecord', configuration: 'shadow')
}

shadowJar {
    relocate 'net.dv8tion.jda', 'dev.austech.betterstaffchat.shaded.jda'
    relocate 'org.bstats', 'dev.austech.betterstaffchat.shaded.metrics'
}

task copyJars(type: Copy) {
    outputTasks().forEach({ from(it) })
    rename '(.*)-all.jar', ('$1' + '.jar')
    rename project.name + "-" + project.version + ".jar", project.name + "-" + project.fullVersion + ".jar"
    into file('jars')
}

def outputTasks() {
    ["shadowJar", ":BetterStaffChat-spigot:shadowJar", ":BetterStaffChat-bungeecord:shadowJar"].stream().map({ tasks.findByPath(it) })
}

task cleanJars() {
    delete file('jars')
}

clean.dependsOn cleanJars
build.dependsOn shadowJar
build.dependsOn copyJars